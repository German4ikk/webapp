const tg = window.Telegram.WebApp;
tg.expand();
console.log("Telegram initData:", tg.initData);

const urlParams = new URLSearchParams(window.location.search);
let mode = urlParams.get('mode');
const userId = tg.initDataUnsafe.user ? tg.initDataUnsafe.user.id : 'test_user';

const modeSelectionDiv = document.getElementById('modeSelection');
const startModeBtn = document.getElementById('startModeBtn');
const viewerContainer = document.getElementById('viewerContainer');
const streamList = document.getElementById('streamList');
const loading = document.getElementById('loading');
const appContainerDiv = document.getElementById('appContainer');
const modeTitle = document.getElementById('modeTitle');
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
const chatContainer = document.getElementById('chatContainer');
const chatInput = document.getElementById('chatInput');
const sendMsgBtn = document.getElementById('sendMsgBtn');
const giftBtn = document.getElementById('giftBtn');

let localStream;

if (!mode) {
  modeSelectionDiv.classList.remove('hidden');
} else {
  startApp(mode).catch(error => console.error("Error in startApp:", error));
}

startModeBtn.addEventListener('click', () => {
  const selectedMode = document.querySelector('input[name="mode"]:checked').value;
  startApp(selectedMode).catch(error => console.error("Error in startApp:", error));
});

async function startApp(selectedMode) {
  mode = selectedMode;
  modeSelectionDiv.classList.add('hidden');

  if (mode === 'viewer') {
    viewerContainer.classList.remove('hidden');
    loading.classList.remove('hidden');
    await fetchStreams();
    loading.classList.add('hidden');
  } else {
    viewerContainer.classList.add('hidden');
    appContainerDiv.classList.remove('hidden');
    modeTitle.innerText = getModeTitle(mode);

    const videoStarted = await startVideo();
    if (!videoStarted) return;

    if (mode === 'stream') {
      chatContainer.innerHTML = `<div class="chat-message"><i>–í–∞—à —ç—Ñ–∏—Ä –∑–∞–ø—É—â–µ–Ω üî•</i></div>`;
      giftBtn.classList.add('hidden'); // –í–µ–¥—É—â–∏–π –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∞—Ä–∫–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ
    } else if (mode === 'roulette') {
      chatContainer.innerHTML = `<div class="chat-message"><i>–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...</i></div>`;
      giftBtn.classList.remove('hidden');
    }
  }
}

async function startVideo() {
  try {
    const constraints = { video: { width: { ideal: 1280 }, height: { ideal: 720 }, facingMode: 'user' }, audio: true };
    localStream = await navigator.mediaDevices.getUserMedia(constraints);
    localVideo.srcObject = localStream;
    localVideo.play();
    console.log("Video stream started successfully");
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É:", error);
    chatContainer.innerHTML += `<div class="chat-message"><b>–û—à–∏–±–∫–∞:</b> ${error.message}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.</div>`;
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    return false;
  }
}

async function fetchStreams() {
  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ WebSocket –æ—Ç–∫–ª—é—á—ë–Ω
  streamList.innerHTML = '<div class="stream-item"><h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ–∏—Ä–æ–≤</h3></div>';
}

function updateStreamList(streamerId, mode) {
  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ WebSocket –æ—Ç–∫–ª—é—á—ë–Ω
  streamList.innerHTML = `<div class="stream-item"><h3>–≠—Ñ–∏—Ä ${mode === 'stream_18' ? '(18+)' : ''} –æ—Ç ${streamerId}</h3><p>–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è üëÄ</p></div>`;
}

function getModeTitle(m) {
  return m === 'stream' ? "–≠—Ñ–∏—Ä üî•" : m === 'roulette' ? "–í–∏–¥–µ–æ-—Ä—É–ª–µ—Ç–∫–∞ üéâ" : "–≠—Ñ–∏—Ä (–∑—Ä–∏—Ç–µ–ª—å) üëÄ";
}

sendMsgBtn.addEventListener('click', () => {
  const msg = chatInput.value.trim();
  if (!msg) return;
  appendMessage("–í—ã", msg);
  chatInput.value = "";
  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —á–∞—Ç–∞ –±–µ–∑ WebSocket
  chatContainer.innerHTML += `<div class="chat-message"><b>–í—ã:</b> ${msg}</div>`;
  chatContainer.scrollTop = chatContainer.scrollHeight;
});

giftBtn.addEventListener('click', () => {
  const giftAmount = 1.0; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–æ–¥–∞—Ä–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
  chatContainer.innerHTML += `<div class="chat-message"><b>–í—ã:</b> –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ ${giftAmount} üéÅ</div>`;
});

function appendMessage(sender, message) {
  chatContainer.innerHTML += `<div class="chat-message"><b>${sender}:</b> ${message}</div>`;
  chatContainer.scrollTop = chatContainer.scrollHeight;
}

tg.onEvent('data', (data) => {
  console.log('Received data from bot:', data);
  if (data.event === 'gift') {
    chatContainer.innerHTML += `<div class="chat-message"><b>–ë–æ—Ç:</b> –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ ${data.amount} üéÅ</div>`;
  }
});
