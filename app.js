const tg = window.Telegram.WebApp;
tg.expand();

// 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ —Å—Ç—Ä–æ–∫–∞—Ö (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω escapeHTML)
const escapeHTML = (str) => str.replace(/</g, '&lt;').replace(/>/g, '&gt;');

// 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebRTC (–¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ STUN-—Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏)
const ICE_CONFIG = {
  iceServers: [
    { urls: "stun:stun.l.google.com:19302" },
    { urls: "stun:stun1.l.google.com:19302" },
    { urls: "stun:stun2.l.google.com:19302" }
  ]
};

let peerConnection;
let localStream;
let userId = Math.random().toString(36).substr(2, 9); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π userId
let socket;
let reconnectTimer;

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ HTML)
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
const streamList = document.getElementById('streamList');

// 3. –£–ª—É—á—à–µ–Ω–Ω–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const WEBSOCKET_URL = "wss://websocket-production-3524.up.railway.app";
const MAX_RECONNECT_ATTEMPTS = 5;
let reconnectAttempts = 0;

const initWebSocket = () => {
  if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
    console.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
    showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    return;
  }

  socket = new WebSocket(WEBSOCKET_URL);

  socket.onopen = () => {
    console.log("‚úÖ WebSocket connected");
    clearTimeout(reconnectTimer);
    reconnectAttempts = 0;
    registerUser();
  };

  socket.onmessage = handleMessage;

  socket.onerror = (error) => {
    console.error("WebSocket error:", error);
  };

  socket.onclose = () => {
    console.log("üîå WebSocket connection closed");
    reconnectAttempts++;
    reconnectTimer = setTimeout(initWebSocket, 5000 * reconnectAttempts);
  };
};

// 4. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª WebRTC —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
const createPeerConnection = async () => {
  if (peerConnection) {
    peerConnection.close();
    peerConnection = null;
  }

  peerConnection = new RTCPeerConnection(ICE_CONFIG);

  peerConnection.onicecandidate = ({ candidate }) => {
    if (candidate) {
      socket.send(JSON.stringify({
        type: "ice_candidate",
        candidate: candidate.toJSON(),
        user_id: userId
      }));
    }
  };

  peerConnection.ontrack = (event) => {
    if (event.streams && event.streams[0]) {
      remoteVideo.srcObject = event.streams[0];
      remoteVideo.play().catch(e => console.error("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ:", e));
    }
  };

  peerConnection.oniceconnectionstatechange = () => {
    console.log("ICE connection state:", peerConnection.iceConnectionState);
    if (peerConnection.iceConnectionState === 'failed') {
      showError("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.");
    }
  };

  if (localStream) {
    localStream.getTracks().forEach(track => {
      peerConnection.addTrack(track, localStream);
    });
  }
};

// 5. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ñ–∏—Ä–æ–≤
function renderStreamList(streams) {
  if (!streamList) return;
  streamList.innerHTML = streams.map(sid => `
    <div class="stream-item" onclick="joinStream('${escapeHTML(sid)}')">
      <h3>üé• –≠—Ñ–∏—Ä –æ—Ç ${escapeHTML(sid)}</h3>
      <p>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</p>
    </div>
  `).join('');
}

// 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É–ª–µ—Ç–∫–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
async function handleRoulette() {
  try {
    await createPeerConnection();
    
    const offer = await peerConnection.createOffer();
    await peerConnection.setLocalDescription(offer);

    socket.send(JSON.stringify({
      type: "join_roulette",
      user_id: userId
    }));

    // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –Ω–∞–π–¥—ë–Ω
    const timeout = setTimeout(() => {
      if (!peerConnection.remoteDescription) {
        showError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        peerConnection.close();
      }
    }, 15000); // 15 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è

    socket.send(JSON.stringify({
      type: "roulette_offer",
      offer: offer,
      user_id: userId
    }));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Ä—É–ª–µ—Ç–∫–µ");
  }
}

// 7. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const handleMessage = async (event) => {
  try {
    const data = JSON.parse(event.data);
    console.log("üì• Received:", data.type);

    switch (data.type) {
      case 'stream_list':
        renderStreamList(data.streams || []);
        break;
      case 'partner':
        await handlePartner(data.partner_id);
        break;
      case 'offer':
        await handleOffer(data);
        break;
      case 'answer':
        await handleAnswer(data);
        break;
      case 'ice_candidate':
        await handleIceCandidate(data);
        break;
      case 'error':
        showError(data.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
        break;
      case 'connected':
        console.log("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É");
        break;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
  }
};

// 8. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebRTC
async function handleOffer(data) {
  try {
    await createPeerConnection();
    await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);

    socket.send(JSON.stringify({
      type: "answer",
      answer: answer,
      to: data.from,
      user_id: userId
    }));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ offer:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è WebRTC");
  }
}

async function handleAnswer(data) {
  try {
    await peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ answer:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ WebRTC");
  }
}

async function handleIceCandidate(data) {
  try {
    if (data.candidate) {
      await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞");
  }
}

async function handlePartner(partnerId) {
  try {
    const offer = await peerConnection.createOffer();
    await peerConnection.setLocalDescription(offer);

    socket.send(JSON.stringify({
      type: "offer",
      offer: offer,
      to: partnerId,
      user_id: userId
    }));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ø–∞—Ä—Ç–Ω—ë—Ä—É:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É");
  }
}

// 9. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
document.addEventListener('DOMContentLoaded', async () => {
  try {
    initWebSocket();
    setupEventListeners();
    await startVideo();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
  }
});

// 10. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function startVideo() {
  try {
    const constraints = { 
      video: { width: 1280, height: 720, facingMode: "user" },
      audio: true
    };
    
    localStream = await navigator.mediaDevices.getUserMedia(constraints);
    if (localVideo) {
      localVideo.srcObject = localStream;
      await localVideo.play();
    }
    
    return true;
  } catch (error) {
    console.error("Camera error:", error);
    showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É");
    return false;
  }
}

async function joinStream(streamerId) {
  try {
    await createPeerConnection();
    
    const offer = await peerConnection.createOffer();
    await peerConnection.setLocalDescription(offer);

    socket.send(JSON.stringify({
      type: "join_stream",
      user_id: userId,
      streamer_id: streamerId
    }));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —ç—Ñ–∏—Ä—É:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —ç—Ñ–∏—Ä—É");
  }
}

function registerUser() {
  socket.send(JSON.stringify({
    type: "register",
    user_id: userId,
    mode: "viewer" // –∏–ª–∏ "streamer" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  }));
}

function setupEventListeners() {
  // –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–æ–∫)
  document.getElementById('startRouletteBtn')?.addEventListener('click', handleRoulette);
  document.getElementById('startStreamBtn')?.addEventListener('click', () => {
    socket.send(JSON.stringify({
      type: "start_stream",
      user_id: userId,
      mode: "stream"
    }));
  });
}

function showError(message) {
  const errorDiv = document.getElementById('errorMessage');
  if (errorDiv) {
    errorDiv.textContent = message;
    errorDiv.style.display = 'block';
    setTimeout(() => errorDiv.style.display = 'none', 5000);
  }
  console.error("Error:", message);
}
