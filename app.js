const tg = window.Telegram.WebApp;
if (tg) {
  try {
    tg.expand();
    console.log("Telegram initData:", tg.initData);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:", error);
  }
} else {
  console.error("Telegram WebApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
}

// –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ initData (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω) –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
const userId = tg?.initDataUnsafe?.user ? tg.initDataUnsafe.user.id : Math.random().toString(36).substr(2, 9);
let mode = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º mode, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞

// WebSocket URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
const WEBSOCKET_URL = "wss://websocket-production-3524.up.railway.app";
let socket;
let reconnectTimer;
const MAX_RECONNECT_ATTEMPTS = 5;
let reconnectAttempts = 0;
let pingInterval; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–æ–≤

const ICE_CONFIG = {
  iceServers: [
    { urls: "stun:stun.l.google.com:19302" },
    { urls: "stun:stun1.l.google.com:19302" },
    { urls: "stun:stun2.l.google.com:19302" },
    // –î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π TURN-—Å–µ—Ä–≤–µ—Ä (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
    { urls: "turn:your-turn-server.xirsys.com:3478", username: "your-username", credential: "your-password" }
  ]
};

let peerConnection;
let localStream;
let partnerId = null; // –•—Ä–∞–Ω–∏–º ID –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const modeSelectionDiv = document.getElementById('modeSelection');
const startModeBtn = document.getElementById('startModeBtn');
const viewerContainer = document.getElementById('viewerContainer');
const streamList = document.getElementById('streamList');
const loading = document.getElementById('loading');
const appContainerDiv = document.getElementById('appContainer');
const modeTitle = document.getElementById('modeTitle');
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
const chatContainer = document.getElementById('chatContainer');
const chatInput = document.getElementById('chatInput');
const sendMsgBtn = document.getElementById('sendMsgBtn');
const giftBtn = document.getElementById('giftBtn');
const errorMessage = document.getElementById('errorMessage');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
function checkWebSocket() {
  if (socket && socket.readyState === WebSocket.CLOSED) {
    console.warn("WebSocket –∑–∞–∫—Ä—ã—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è");
    initWebSocket();
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏–Ω–≥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function sendPing() {
  if (socket && socket.readyState === WebSocket.OPEN) {
    socket.send(JSON.stringify({ type: 'ping' }));
    console.log("üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ WebSocket");
  } else {
    console.warn("WebSocket –Ω–µ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥–∞");
  }
}

// WebSocket —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
const initWebSocket = () => {
  if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
    console.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
    showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    return;
  }

  if (socket) {
    socket.close();
  }

  socket = new WebSocket(WEBSOCKET_URL);

  socket.onopen = () => {
    console.log("‚úÖ WebSocket connected successfully");
    clearTimeout(reconnectTimer);
    reconnectAttempts = 0;
    if (mode) registerUser();
    // –ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(checkWebSocket, 5000);
    // –ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏–Ω–≥–æ–≤ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
    pingInterval = setInterval(sendPing, 20000);
  };

  socket.onmessage = handleMessage;

  socket.onerror = (error) => {
    console.error("‚ùå WebSocket error:", error);
    showError("–û—à–∏–±–∫–∞ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
  };

  socket.onclose = (event) => {
    console.log("üîå WebSocket connection closed, code:", event.code, "reason:", event.reason);
    clearInterval(pingInterval); // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∏–Ω–≥–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    reconnectAttempts++;
    reconnectTimer = setTimeout(() => {
      initWebSocket();
      console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #${reconnectAttempts}`);
    }, 5000 * reconnectAttempts);
  };
};

function registerUser() {
  if (socket.readyState === WebSocket.OPEN) {
    socket.send(JSON.stringify({
      type: "register",
      user_id: userId,
      mode: mode || "viewer"
    }));
  } else {
    console.error("WebSocket –Ω–µ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    showError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚Äî WebSocket –∑–∞–∫—Ä—ã—Ç");
    setTimeout(registerUser, 1000); // –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
  }
}

const handleMessage = async (event) => {
  try {
    const data = JSON.parse(event.data);
    console.log("üì• Received:", data.type);

    if (data.type === 'pong') {
      console.log("üèì –ü–æ–ª—É—á–µ–Ω pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
      return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º pong, –æ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    }

    switch (data.type) {
      case 'connected':
        console.log("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É");
        if (mode === 'viewer') {
          socket.send(JSON.stringify({ type: "get_streams", user_id: userId }));
        } else if (mode === 'stream') {
          startStream();
        } else if (mode === 'roulette') {
          handleRoulette();
        }
        break;
      case 'stream_list':
        renderStreamList(data.streams || []);
        break;
      case 'stream_started':
      case 'stream_notification':
        updateStreamList(data.user_id, data.mode);
        break;
      case 'partner':
        partnerId = data.partner_id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–∞—Ä—Ç–Ω—ë—Ä–∞
        await handlePartner(data.partner_id);
        break;
      case 'offer':
        await handleOffer(data);
        break;
      case 'answer':
        await handleAnswer(data);
        break;
      case 'candidate':
        await handleIceCandidate(data);
        break;
      case 'chat_message':
        appendMessage(data.user_id, data.message);
        break;
      case 'gift':
        appendMessage("–ë–æ—Ç", `üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ ${data.amount}`);
        break;
      case 'error':
        showError(data.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
        break;
      case 'viewer_joined':
        console.log(`–ó—Ä–∏—Ç–µ–ª—å ${data.viewer_id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≤–∞—à–µ–º—É —ç—Ñ–∏—Ä—É`);
        appendMessage("–°–∏—Å—Ç–µ–º–∞", `–ó—Ä–∏—Ç–µ–ª—å ${data.viewer_id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`);
        break;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
  }
};

const createPeerConnection = async () => {
  if (peerConnection) {
    peerConnection.close();
    peerConnection = null;
  }

  peerConnection = new RTCPeerConnection(ICE_CONFIG);

  peerConnection.onicecandidate = ({ candidate }) => {
    if (candidate && socket.readyState === WebSocket.OPEN) {
      socket.send(JSON.stringify({
        type: "candidate",
        candidate: candidate.toJSON(),
        user_id: userId,
        to: peerConnection.remoteUserId || partnerId || null // –î–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      }));
    } else {
      console.error("WebSocket –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ ICE");
    }
  };

  peerConnection.ontrack = (event) => {
    console.log("Received track:", event);
    if (event.streams && event.streams[0]) {
      remoteVideo.srcObject = event.streams[0];
      remoteVideo.play().catch(e => console.error("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ:", e));
    } else {
      console.warn("No streams in ontrack event:", event);
    }
  };

  peerConnection.oniceconnectionstatechange = () => {
    console.log("ICE connection state:", peerConnection.iceConnectionState);
    if (peerConnection.iceConnectionState === 'failed') {
      showError("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.");
    }
  };

  if (localStream) {
    localStream.getTracks().forEach(track => {
      peerConnection.addTrack(track, localStream);
    });
  }
};

async function handleOffer(data) {
  try {
    await createPeerConnection();
    peerConnection.remoteUserId = data.from; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);

    if (socket.readyState === WebSocket.OPEN) {
      socket.send(JSON.stringify({
        type: "answer",
        answer: answer,
        to: data.from,
        user_id: userId
      }));
    } else {
      console.error("WebSocket –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ answer");
      showError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç WebRTC ‚Äî WebSocket –∑–∞–∫—Ä—ã—Ç");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ offer:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è WebRTC");
  }
}

async function handleAnswer(data) {
  try {
    await peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ answer:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ WebRTC");
  }
}

async function handleIceCandidate(data) {
  try {
    if (data.candidate) {
      await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞");
  }
}

async function handlePartner(partnerId) {
  try {
    await createPeerConnection();
    peerConnection.remoteUserId = partnerId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–∞—Ä—Ç–Ω—ë—Ä–∞
    const offer = await peerConnection.createOffer();
    await peerConnection.setLocalDescription(offer);

    if (socket.readyState === WebSocket.OPEN) {
      socket.send(JSON.stringify({
        type: "offer",
        offer: offer,
        to: partnerId,
        user_id: userId
      }));
    } else {
      console.error("WebSocket –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ offer –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞");
      showError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ WebRTC ‚Äî WebSocket –∑–∞–∫—Ä—ã—Ç");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ø–∞—Ä—Ç–Ω—ë—Ä—É:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É");
  }
}

async function startApp(selectedMode) {
  mode = selectedMode;
  modeSelectionDiv.classList.add('hidden');

  if (mode === 'viewer') {
    viewerContainer.classList.remove('hidden');
    loading.classList.remove('hidden');
    if (socket.readyState === WebSocket.OPEN) {
      socket.send(JSON.stringify({ type: "get_streams", user_id: userId }));
    }
    loading.classList.add('hidden');
  } else {
    viewerContainer.classList.add('hidden');
    appContainerDiv.classList.remove('hidden');
    modeTitle.innerText = getModeTitle(mode);

    const videoStarted = await startVideo();
    if (!videoStarted) return;

    if (mode === 'stream') {
      chatContainer.innerHTML = '<div class="chat-message"><i>üì° –í–∞—à —ç—Ñ–∏—Ä –∑–∞–ø—É—â–µ–Ω!</i></div>';
      giftBtn.classList.add('hidden');
      if (socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify({
          type: "start_stream",
          user_id: userId,
          mode: mode
        }));
      }
    } else if (mode === 'roulette') {
      chatContainer.innerHTML = '<div class="chat-message"><i>üîÑ –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...</i></div>';
      giftBtn.classList.remove('hidden');
      if (socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify({
          type: "join_roulette",
          user_id: userId
        }));
      }
    }
  }
}

async function startVideo() {
  try {
    const constraints = { 
      video: { width: { ideal: 1280 }, height: { ideal: 720 }, facingMode: 'user' },
      audio: true 
    };
    localStream = await navigator.mediaDevices.getUserMedia(constraints);
    if (localVideo) {
      localVideo.srcObject = localStream;
      await localVideo.play();
    }
    console.log("üì∑ Video stream started successfully");
    return true;
  } catch (error) {
    console.error("üö® –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É:", error);
    chatContainer.innerHTML += `<div class="chat-message"><b>–û—à–∏–±–∫–∞:</b> ${error.message}</div>`;
    showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É");
    return false;
  }
}

function renderStreamList(streams) {
  if (!streamList) return;
  if (streams.length === 0) {
    streamList.innerHTML = '<div class="stream-item"><h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ–∏—Ä–æ–≤</h3></div>';
  } else {
    streamList.innerHTML = streams.map(sid => `
      <div class="stream-item" onclick="joinStream('${sid}')">
        <h3>üé• –≠—Ñ–∏—Ä –æ—Ç ${sid}</h3>
        <p>–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</p>
      </div>
    `).join('');
  }
}

function joinStream(streamerId) {
  if (socket.readyState !== WebSocket.OPEN) {
    showError("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
    return;
  }
  createPeerConnection().then(() => {
    peerConnection.createOffer()
      .then(offer => {
        peerConnection.setLocalDescription(offer)
          .then(() => {
            if (socket.readyState === WebSocket.OPEN) {
              socket.send(JSON.stringify({
                type: "join_stream",
                user_id: userId,
                streamer_id: streamerId,
                offer: offer // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π offer
              }));
            } else {
              console.error("WebSocket –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —ç—Ñ–∏—Ä—É");
              showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —ç—Ñ–∏—Ä—É ‚Äî WebSocket –∑–∞–∫—Ä—ã—Ç");
            }
          });
      })
      .catch(error => console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer:", error));
  });
  appContainerDiv.classList.remove('hidden');
  viewerContainer.classList.add('hidden');
  modeTitle.innerText = "–ü—Ä–æ—Å–º–æ—Ç—Ä —ç—Ñ–∏—Ä–∞";
  chatContainer.innerHTML = `<div class="chat-message"><i>–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ñ–∏—Ä—É –æ—Ç ${streamerId}</i></div>`;
}

function handleRoulette() {
  if (socket.readyState !== WebSocket.OPEN) {
    showError("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
    return;
  }
  createPeerConnection().then(() => {
    peerConnection.createOffer()
      .then(offer => {
        peerConnection.setLocalDescription(offer)
          .then(() => {
            if (socket.readyState === WebSocket.OPEN) {
              socket.send(JSON.stringify({
                type: "join_roulette",
                user_id: userId,
                offer: offer // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π offer
              }));
            } else {
              console.error("WebSocket –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Ä—É–ª–µ—Ç–∫–µ");
              showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ä—É–ª–µ—Ç–∫–µ ‚Äî WebSocket –∑–∞–∫—Ä—ã—Ç");
            }
          });
      })
      .catch(error => console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏:", error));
  });
  chatContainer.innerHTML = '<div class="chat-message"><i>üîÑ –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...</i></div>';
  giftBtn.classList.remove('hidden');
}

function startStream() {
  if (socket.readyState === WebSocket.OPEN) {
    socket.send(JSON.stringify({
      type: "start_stream",
      user_id: userId,
      mode: "stream"
    }));
    chatContainer.innerHTML = '<div class="chat-message"><i>üì° –í–∞—à —ç—Ñ–∏—Ä –∑–∞–ø—É—â–µ–Ω!</i></div>';
    giftBtn.classList.add('hidden');
  } else {
    console.error("WebSocket –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç—Ñ–∏—Ä–∞");
    showError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ñ–∏—Ä ‚Äî WebSocket –∑–∞–∫—Ä—ã—Ç");
  }
}

function getModeTitle(m) {
  switch (m) {
    case 'stream': return "üì° –≠—Ñ–∏—Ä";
    case 'roulette': return "üé• –í–∏–¥–µ–æ-—Ä—É–ª–µ—Ç–∫–∞";
    case 'viewer': return "üëÄ –ó—Ä–∏—Ç–µ–ª—å";
    default: return "üîÑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º";
  }
}

sendMsgBtn.addEventListener('click', () => {
  const msg = chatInput.value.trim();
  if (!msg) return;
  appendMessage("–í—ã", msg);
  chatInput.value = "";
  if (socket.readyState === WebSocket.OPEN) {
    const to = mode === 'roulette' ? partnerId : (mode === 'viewer' ? peerConnection?.remoteUserId || null : null); // –î–ª—è —Ä—É–ª–µ—Ç–∫–∏ ‚Äî –ø–∞—Ä—Ç–Ω—ë—Ä, –¥–ª—è –∑—Ä–∏—Ç–µ–ª—è ‚Äî —Å—Ç—Ä–∏–º–µ—Ä, –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞ ‚Äî –≤—Å–µ–º
    socket.send(JSON.stringify({
      type: "chat_message",
      user_id: userId,
      message: msg,
      to: to
    }));
  } else {
    console.error("WebSocket –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
    showError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî WebSocket –∑–∞–∫—Ä—ã—Ç");
  }
});

giftBtn.addEventListener('click', () => {
  const giftAmount = 1.0;
  appendMessage("–í—ã", `üéÅ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ ${giftAmount}`);
  if (socket.readyState === WebSocket.OPEN) {
    const to = mode === 'roulette' ? partnerId : (mode === 'viewer' ? peerConnection?.remoteUserId : userId);
    socket.send(JSON.stringify({
      type: "gift",
      user_id: userId,
      to: to,
      amount: giftAmount
    }));
  } else {
    console.error("WebSocket –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞");
    showError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ ‚Äî WebSocket –∑–∞–∫—Ä—ã—Ç");
    // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    setTimeout(() => {
      if (socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify({
          type: "gift",
          user_id: userId,
          to: to,
          amount: giftAmount
        }));
      }
    }, 1000);
  }
});

function appendMessage(sender, message) {
  chatContainer.innerHTML += `<div class="chat-message"><b>${sender}:</b> ${message}</div>`;
  chatContainer.scrollTop = chatContainer.scrollHeight;
}

function showError(message) {
  if (errorMessage) {
    errorMessage.textContent = message;
    errorMessage.style.display = 'block';
    setTimeout(() => errorMessage.style.display = 'none', 5000);
  }
  console.error("Error:", message);
}

function updateStreamList(userId, mode) {
  if (socket.readyState === WebSocket.OPEN) {
    socket.send(JSON.stringify({ type: "get_streams", user_id: userId }));
  } else {
    console.error("WebSocket –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —ç—Ñ–∏—Ä–æ–≤");
    showError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç—Ñ–∏—Ä–æ–≤ ‚Äî WebSocket –∑–∞–∫—Ä—ã—Ç");
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  initWebSocket();
  setupEventListeners();

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ mode –Ω–µ —É–∫–∞–∑–∞–Ω
  const urlParams = new URLSearchParams(window.location.search);
  mode = urlParams.get('mode');
  if (!mode || !['viewer', 'stream', 'roulette'].includes(mode)) {
    modeSelectionDiv.classList.remove('hidden');
  } else {
    startApp(mode).catch(error => console.error("‚ùå Error in startApp:", error));
  }
});

function setupEventListeners() {
  startModeBtn?.addEventListener('click', () => {
    const selectedRadio = document.querySelector('input[name="mode"]:checked');
    if (!selectedRadio) {
      showError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º.");
      return;
    }
    const selectedMode = selectedRadio.value;
    startApp(selectedMode).catch(error => console.error("‚ùå Error in startApp:", error));
  });

  document.getElementById('startRouletteBtn')?.addEventListener('click', handleRoulette);
  document.getElementById('startStreamBtn')?.addEventListener('click', startStream);
}
