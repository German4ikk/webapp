const tg = window.Telegram.WebApp;
tg.expand();
console.log("Telegram initData:", tg.initData);

// –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ initData (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω) –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
const userId = tg.initDataUnsafe.user ? tg.initDataUnsafe.user.id : Math.random().toString(36).substr(2, 9);
let mode = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º mode, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞

// WebSocket URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
const WEBSOCKET_URL = "wss://websocket-production-3524.up.railway.app";
let socket;
let reconnectTimer;
const MAX_RECONNECT_ATTEMPTS = 5;
let reconnectAttempts = 0;

const ICE_CONFIG = {
  iceServers: [
    { urls: "stun:stun.l.google.com:19302" },
    { urls: "stun:stun1.l.google.com:19302" },
    { urls: "stun:stun2.l.google.com:19302" }
  ]
};

let peerConnection;
let localStream;

// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const modeSelectionDiv = document.getElementById('modeSelection');
const startModeBtn = document.getElementById('startModeBtn');
const viewerContainer = document.getElementById('viewerContainer');
const streamList = document.getElementById('streamList');
const loading = document.getElementById('loading');
const appContainerDiv = document.getElementById('appContainer');
const modeTitle = document.getElementById('modeTitle');
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
const chatContainer = document.getElementById('chatContainer');
const chatInput = document.getElementById('chatInput');
const sendMsgBtn = document.getElementById('sendMsgBtn');
const giftBtn = document.getElementById('giftBtn');
const errorMessage = document.getElementById('errorMessage');

// WebSocket —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
const initWebSocket = () => {
  if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
    console.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
    showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    return;
  }

  socket = new WebSocket(WEBSOCKET_URL);

  socket.onopen = () => {
    console.log("‚úÖ WebSocket connected");
    clearTimeout(reconnectTimer);
    reconnectAttempts = 0;
    if (mode) registerUser();
  };

  socket.onmessage = handleMessage;

  socket.onerror = (error) => {
    console.error("‚ùå WebSocket error:", error);
  };

  socket.onclose = () => {
    console.log("üîå WebSocket connection closed");
    reconnectAttempts++;
    reconnectTimer = setTimeout(initWebSocket, 5000 * reconnectAttempts);
  };
};

function registerUser() {
  socket.send(JSON.stringify({
    type: "register",
    user_id: userId,
    mode: mode || "viewer"
  }));
}

const handleMessage = async (event) => {
  try {
    const data = JSON.parse(event.data);
    console.log("üì• Received:", data.type);

    switch (data.type) {
      case 'connected':
        console.log("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É");
        if (mode === 'viewer') {
          socket.send(JSON.stringify({ type: "get_streams", user_id: userId }));
        } else if (mode === 'stream') {
          startStream();
        } else if (mode === 'roulette') {
          handleRoulette();
        }
        break;
      case 'stream_list':
        renderStreamList(data.streams || []);
        break;
      case 'stream_started':
      case 'stream_notification':
        updateStreamList(data.user_id, data.mode);
        break;
      case 'partner':
        await handlePartner(data.partner_id);
        break;
      case 'offer':
        await handleOffer(data);
        break;
      case 'answer':
        await handleAnswer(data);
        break;
      case 'ice_candidate':
        await handleIceCandidate(data);
        break;
      case 'chat_message':
        appendMessage(data.user_id, data.message);
        break;
      case 'gift':
        appendMessage("–ë–æ—Ç", `üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ ${data.amount}`);
        break;
      case 'error':
        showError(data.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
        break;
      case 'viewer_joined':
        console.log(`–ó—Ä–∏—Ç–µ–ª—å ${data.viewer_id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≤–∞—à–µ–º—É —ç—Ñ–∏—Ä—É`);
        break;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
  }
};

const createPeerConnection = async () => {
  if (peerConnection) {
    peerConnection.close();
    peerConnection = null;
  }

  peerConnection = new RTCPeerConnection(ICE_CONFIG);

  peerConnection.onicecandidate = ({ candidate }) => {
    if (candidate) {
      socket.send(JSON.stringify({
        type: "ice_candidate",
        candidate: candidate.toJSON(),
        user_id: userId
      }));
    }
  };

  peerConnection.ontrack = (event) => {
    if (event.streams && event.streams[0]) {
      remoteVideo.srcObject = event.streams[0];
      remoteVideo.play().catch(e => console.error("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ:", e));
    }
  };

  peerConnection.oniceconnectionstatechange = () => {
    console.log("ICE connection state:", peerConnection.iceConnectionState);
    if (peerConnection.iceConnectionState === 'failed') {
      showError("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.");
    }
  };

  if (localStream) {
    localStream.getTracks().forEach(track => {
      peerConnection.addTrack(track, localStream);
    });
  }
};

async function handleOffer(data) {
  try {
    await createPeerConnection();
    await peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);

    socket.send(JSON.stringify({
      type: "answer",
      answer: answer,
      to: data.from,
      user_id: userId
    }));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ offer:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è WebRTC");
  }
}

async function handleAnswer(data) {
  try {
    await peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ answer:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ WebRTC");
  }
}

async function handleIceCandidate(data) {
  try {
    if (data.candidate) {
      await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞");
  }
}

async function handlePartner(partnerId) {
  try {
    await createPeerConnection();
    const offer = await peerConnection.createOffer();
    await peerConnection.setLocalDescription(offer);

    socket.send(JSON.stringify({
      type: "offer",
      offer: offer,
      to: partnerId,
      user_id: userId
    }));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ø–∞—Ä—Ç–Ω—ë—Ä—É:", error);
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É");
  }
}

async function startApp(selectedMode) {
  mode = selectedMode;
  modeSelectionDiv.classList.add('hidden');

  if (mode === 'viewer') {
    viewerContainer.classList.remove('hidden');
    loading.classList.remove('hidden');
    if (socket.readyState === WebSocket.OPEN) {
      socket.send(JSON.stringify({ type: "get_streams", user_id: userId }));
    }
    loading.classList.add('hidden');
  } else {
    viewerContainer.classList.add('hidden');
    appContainerDiv.classList.remove('hidden');
    modeTitle.innerText = getModeTitle(mode);

    const videoStarted = await startVideo();
    if (!videoStarted) return;

    if (mode === 'stream') {
      chatContainer.innerHTML = '<div class="chat-message"><i>üì° –í–∞—à —ç—Ñ–∏—Ä –∑–∞–ø—É—â–µ–Ω!</i></div>';
      giftBtn.classList.add('hidden');
      if (socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify({
          type: "start_stream",
          user_id: userId,
          mode: mode
        }));
      }
    } else if (mode === 'roulette') {
      chatContainer.innerHTML = '<div class="chat-message"><i>üîÑ –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...</i></div>';
      giftBtn.classList.remove('hidden');
      if (socket.readyState === WebSocket.OPEN) {
        socket.send(JSON.stringify({
          type: "join_roulette",
          user_id: userId
        }));
      }
    }
  }
}

async function startVideo() {
  try {
    const constraints = { 
      video: { width: { ideal: 1280 }, height: { ideal: 720 }, facingMode: 'user' },
      audio: true 
    };
    localStream = await navigator.mediaDevices.getUserMedia(constraints);
    if (localVideo) {
      localVideo.srcObject = localStream;
      await localVideo.play();
    }
    console.log("üì∑ Video stream started successfully");
    return true;
  } catch (error) {
    console.error("üö® –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É:", error);
    chatContainer.innerHTML += `<div class="chat-message"><b>–û—à–∏–±–∫–∞:</b> ${error.message}</div>`;
    showError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É");
    return false;
  }
}

function renderStreamList(streams) {
  if (!streamList) return;
  if (streams.length === 0) {
    streamList.innerHTML = '<div class="stream-item"><h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ–∏—Ä–æ–≤</h3></div>';
  } else {
    streamList.innerHTML = streams.map(sid => `
      <div class="stream-item" onclick="joinStream('${sid}')">
        <h3>üé• –≠—Ñ–∏—Ä –æ—Ç ${sid}</h3>
        <p>–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</p>
      </div>
    `).join('');
  }
}

function joinStream(streamerId) {
  if (socket.readyState !== WebSocket.OPEN) {
    showError("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
    return;
  }
  createPeerConnection().then(() => {
    peerConnection.createOffer().then(offer => {
      peerConnection.setLocalDescription(offer).then(() => {
        socket.send(JSON.stringify({
          type: "join_stream",
          user_id: userId,
          streamer_id: streamerId
        }));
      });
    });
  });
  appContainerDiv.classList.remove('hidden');
  viewerContainer.classList.add('hidden');
  modeTitle.innerText = "–ü—Ä–æ—Å–º–æ—Ç—Ä —ç—Ñ–∏—Ä–∞";
  chatContainer.innerHTML = `<div class="chat-message"><i>–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ñ–∏—Ä—É –æ—Ç ${streamerId}</i></div>`;
}

function handleRoulette() {
  if (socket.readyState !== WebSocket.OPEN) {
    showError("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
    return;
  }
  createPeerConnection().then(() => {
    peerConnection.createOffer().then(offer => {
      peerConnection.setLocalDescription(offer).then(() => {
        socket.send(JSON.stringify({
          type: "join_roulette",
          user_id: userId
        }));
      });
    });
  });
  chatContainer.innerHTML = '<div class="chat-message"><i>üîÑ –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...</i></div>';
  giftBtn.classList.remove('hidden');
}

function startStream() {
  if (socket.readyState !== WebSocket.OPEN) {
    showError("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
    return;
  }
  socket.send(JSON.stringify({
    type: "start_stream",
    user_id: userId,
    mode: "stream"
  }));
  chatContainer.innerHTML = '<div class="chat-message"><i>üì° –í–∞—à —ç—Ñ–∏—Ä –∑–∞–ø—É—â–µ–Ω!</i></div>';
  giftBtn.classList.add('hidden');
}

function getModeTitle(m) {
  switch (m) {
    case 'stream': return "üì° –≠—Ñ–∏—Ä";
    case 'roulette': return "üé• –í–∏–¥–µ–æ-—Ä—É–ª–µ—Ç–∫–∞";
    case 'viewer': return "üëÄ –ó—Ä–∏—Ç–µ–ª—å";
    default: return "üîÑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º";
  }
}

sendMsgBtn.addEventListener('click', () => {
  const msg = chatInput.value.trim();
  if (!msg) return;
  appendMessage("–í—ã", msg);
  chatInput.value = "";
  if (socket.readyState === WebSocket.OPEN) {
    socket.send(JSON.stringify({
      type: "chat_message",
      user_id: userId,
      message: msg
    }));
  }
});

giftBtn.addEventListener('click', () => {
  const giftAmount = 1.0;
  appendMessage("–í—ã", `üéÅ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ ${giftAmount}`);
  if (socket.readyState === WebSocket.OPEN) {
    socket.send(JSON.stringify({
      type: "gift",
      user_id: userId,
      to: userId, // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–∏–º–µ—Ä–∞)
      amount: giftAmount
    }));
  }
});

function appendMessage(sender, message) {
  chatContainer.innerHTML += `<div class="chat-message"><b>${sender}:</b> ${message}</div>`;
  chatContainer.scrollTop = chatContainer.scrollHeight;
}

function showError(message) {
  if (errorMessage) {
    errorMessage.textContent = message;
    errorMessage.style.display = 'block';
    setTimeout(() => errorMessage.style.display = 'none', 5000);
  }
  console.error("Error:", message);
}

function updateStreamList(userId, mode) {
  if (socket.readyState === WebSocket.OPEN) {
    socket.send(JSON.stringify({ type: "get_streams", user_id: userId }));
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  initWebSocket();
  setupEventListeners();

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ mode –Ω–µ —É–∫–∞–∑–∞–Ω
  const urlParams = new URLSearchParams(window.location.search);
  mode = urlParams.get('mode');
  if (!mode || !['viewer', 'stream', 'roulette'].includes(mode)) {
    modeSelectionDiv.classList.remove('hidden');
  } else {
    startApp(mode).catch(error => console.error("‚ùå Error in startApp:", error));
  }
});

function setupEventListeners() {
  startModeBtn?.addEventListener('click', () => {
    const selectedRadio = document.querySelector('input[name="mode"]:checked');
    if (!selectedRadio) {
      showError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º.");
      return;
    }
    const selectedMode = selectedRadio.value;
    startApp(selectedMode).catch(error => console.error("‚ùå Error in startApp:", error));
  });

  document.getElementById('startRouletteBtn')?.addEventListener('click', handleRoulette);
  document.getElementById('startStreamBtn')?.addEventListener('click', startStream);
}
